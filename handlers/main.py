from aiogram import types, Router, F, Bot
from aiogram.filters import CommandStart, Command
from aiogram.types import CallbackQuery, InlineKeyboardButton, Message
from sqlalchemy import select
from sqlalchemy.ext.asyncio import AsyncSession
from database.orm_query import (orm_add_request_course_information, orm_add_code_missing_information,
                                orm_add_user, orm_add_information_cannotlogin, orm_add_information_whereentercode,
                                orm_add_info_badcode, orm_add_info_noquestion)
from config_data.config import Config, load_config

from filters.chat_types import ChatTypeFilter
from keyboards.inline.inline import get_callback_btns, get_inlineMix_btns
from lexicon.lexicon import (LEXICON_btn_questions, LEXICON_RU, LEXICON_btn_answer_questions,
                             LEXICON_btn_helh_with_code, LEXICON_btn_code_do_not_work,
                             LEXICON_btn_model_phone, LEXICON_btn_back_to_questions, LEXICON_btn_logging_instruction,
                             LEXICON_btn_no_my_question, LEXICON_btn_back_and_video_android,
                             LEXICON_btn_back_and_video_iphone)
from lexicon.lexicon import PDF_FILE_ANDR_INTR, PDF_FILE_IPHONE_INTR, VIDEO_FILE_ANDR_INTR, VIDEO_FILE_IPHONE_INTR

from aiogram.filters import Command, StateFilter, or_f
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext

from dotenv import find_dotenv, load_dotenv

load_dotenv(find_dotenv())

config: Config = load_config()

user_private_router = Router()
user_private_router.message.filter(ChatTypeFilter(['private']))


@user_private_router.message(F.text.lower().in_({'–≤–æ–ø—Ä–æ—Å—ã', '–≤–æ–ø—Ä–æ—Å', "questions", "—Å—Ç–∞—Ä—Ç", "start", "–Ω–∞—á–∞—Ç—å"}))
@user_private_router.message(CommandStart())
@user_private_router.message(Command('questions'))
@user_private_router.callback_query(F.data == 'main_list_questions')
async def start_cmd(message_or_callback: types.Union[types.Message, CallbackQuery], session: AsyncSession):
    if isinstance(message_or_callback, types.Message):
        message = message_or_callback
        await orm_add_user(session,
                           user_id=message.from_user.id,
                           username=message.from_user.username,
                           first_name=message.from_user.first_name,
                           last_name=message.from_user.last_name,
                           )
        await message.answer(text=LEXICON_RU["/question_list"],
                             reply_markup=get_callback_btns(btns=LEXICON_btn_questions, sizes=(1,)),
                             disable_web_page_preview=True)
        # await message.delete()

    elif isinstance(message_or_callback, types.CallbackQuery):
        callback = message_or_callback
        await callback.message.answer(text=LEXICON_RU["/question_list"],
                                      reply_markup=get_callback_btns(btns=LEXICON_btn_questions, sizes=(1,)),
                                      disable_web_page_preview=True)
        # await callback.message.delete()


@user_private_router.callback_query(F.data == 'do_not_have_code')
async def get_help_with_code(callback: types.CallbackQuery):
    await callback.message.answer(text=LEXICON_RU["/help_with_code"],
                                  reply_markup=get_callback_btns(btns=LEXICON_btn_helh_with_code, sizes=(1,)))
    # await callback.message.delete()


@user_private_router.callback_query(F.data == 'help_with_course')
async def get_help_with_questions(callback: types.CallbackQuery):
    await callback.message.answer(text=LEXICON_RU["/help_with_course"],
                                  reply_markup=get_callback_btns(btns=LEXICON_btn_answer_questions, sizes=(1,)))
    # await callback.message.delete()


###########################################FSM for question form#########################

class AddRequestCourse(StatesGroup):
    # –®–∞–≥–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–π
    question1 = State()
    question2 = State()
    question3 = State()
    contact_information = State()

    # product_for_change = None

    texts = {
        'AddRequestCourse:question1': '–û—Ç–≤–µ—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å ‚Ññ1 –∑–∞–Ω–æ–≤–æ. "–ü—Ä–æ–±–ª–µ–º–∞, –∫–æ—Ç–æ—Ä—É—é —è —Ö–æ—á—É —Ä–µ—à–∏—Ç—å - ..."',
        'AddRequestCourse:question2': '–û—Ç–≤–µ—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å ‚Ññ2 –∑–∞–Ω–æ–≤–æ. "–ö–∞–∫ –ø—Ä–æ—è–≤–ª—è–µ—Ç—Å—è —Ç–≤–æ—è –ø—Ä–æ–±–ª–µ–º–∞ –≤ –º—ã—Å–ª—è—Ö, —á—É–≤—Å—Ç–≤–∞—Ö, –æ—â—É—â–µ–Ω–∏—è—Ö, –ø–æ–≤–µ–¥–µ–Ω–∏–∏?"',
        'AddRequestCourse:question3': '–û—Ç–≤–µ—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å ‚Ññ3 –∑–∞–Ω–æ–≤–æ. "–†–µ–∑—É–ª—å—Ç–∞—Ç, –∫–æ—Ç–æ—Ä–æ–≥–æ —è —Ö–æ—á—É –¥–æ—Å—Ç–∏—á—å ‚Äî ..."',
        'AddRequestCourse:contact_information': '–≠—Ç–æ—Ç —Å—Ç–µ–π—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–π, –ø–æ—ç—Ç–æ–º—É...',
    }

# –í–µ—Ä–Ω—É—Ç—Å—è –Ω–∞ —à–∞–≥ –Ω–∞–∑–∞–¥ (–Ω–∞ –ø—Ä–æ—à–ª–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ)
@user_private_router.message(StateFilter("*"), Command("–Ω–∞–∑–∞–¥"))
@user_private_router.message(StateFilter("*"), F.text.casefold() == "–Ω–∞–∑–∞–¥")
async def back_step_handler(message: types.Message, state: FSMContext) -> None:
    current_state = await state.get_state()

    if current_state == AddRequestCourse.question1:
        await message.answer(
            '–ü—Ä–µ–¥–∏–¥—É—â–µ–≥–æ —à–∞–≥–∞ –Ω–µ—Ç. –ù–∞–ø–∏—à–∏ –û–¢–ú–ï–ù–ê –∏–ª–∏ –æ—Ç–≤–µ—Ç—å –Ω–∞ –ø–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å - "–ü—Ä–æ–±–ª–µ–º–∞, –∫–æ—Ç–æ—Ä—É—é —è —Ö–æ—á—É —Ä–µ—à–∏—Ç—å - ..."'
        )
        return
    previous = None
    for step in AddRequestCourse.__all_states__:
        if step.state == current_state:
            await state.set_state(previous)
            await message.answer(
                f"–û–∫, —Ç—ã –≤–µ—Ä–Ω—É–ª—Å—è –∫ –ø—Ä–æ—à–ª–æ–º—É —à–∞–≥—É.\n{AddRequestCourse.texts[previous.state]}"
            )
            return
        previous = step


# –°—Ç–∞–Ω–æ–≤–∏–º—Å—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å ‚Ññ1
@user_private_router.callback_query(StateFilter(None), F.data == 'first_question_form')
async def question_form(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.answer("<b>–û—Ç–≤–µ—Ç—å –Ω–∞ –ø–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å.</b>\n<i>–ü—Ä–æ–±–ª–µ–º–∞, –∫–æ—Ç–æ—Ä—É—é —è —Ö–æ—á—É —Ä–µ—à–∏—Ç—å - ...</i>")
    # await callback.message.delete()
    await state.set_state(AddRequestCourse.question1)


# –•–µ–Ω–¥–ª–µ—Ä –æ—Ç–º–µ–Ω—ã –∏ —Å–±—Ä–æ—Å–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤—Å–µ–≥–¥–∞ –∏–º–µ–Ω–Ω–æ –∑–¥–µ—Å—å,
# –ø–æ—Å–ª–µ —Ç–æ–≥–æ –∫–∞–∫ —Ç–æ–ª—å–∫–æ –≤—Å—Ç–∞–ª–∏ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–æ–º–µ—Ä 1 (—ç–ª–µ–º–µ–Ω—Ç–∞—Ä–Ω–∞—è –æ—á–µ—Ä–µ–¥–Ω–æ—Å—Ç—å —Ñ–∏–ª—å—Ç—Ä–æ–≤)
@user_private_router.message(StateFilter("*"), Command("–æ—Ç–º–µ–Ω–∞"))
@user_private_router.message(StateFilter("*"), F.text.casefold() == "–æ—Ç–º–µ–Ω–∞")
async def cancel_handler(message: types.Message, state: FSMContext) -> None:
    current_state = await state.get_state()
    if current_state is None:
        return
    await state.clear()
    await message.answer(text=LEXICON_RU["/help_with_course"],
                         reply_markup=get_callback_btns(btns=LEXICON_btn_answer_questions, sizes=(1,)))


# –õ–æ–≤–∏–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏–µ question1 –∏ –ø–æ—Ç–æ–º –º–µ–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–∞ question2
@user_private_router.message(AddRequestCourse.question1, F.text)
async def add_question1(message: types.Message, state: FSMContext):
    if message.text:
        if len(message.text) < 5:
            await message.answer(
                "–û—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø–æ—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –±–æ–ª–µ–µ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—ã–ºü§î\n–í–≤–µ–¥–∏ –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å –∑–∞–Ω–æ–≤–æ."
            )
        else:
            await state.update_data(question1=message.text)
            await message.answer("<b>–û—Ç–≤–µ—Ç—å –Ω–∞ –≤—Ç–æ—Ä–æ–π –≤–æ–ø—Ä–æ—Å.</b>\n<i>–ö–∞–∫ –ø—Ä–æ—è–≤–ª—è–µ—Ç—Å—è —Ç–≤–æ—è –ø—Ä–æ–±–ª–µ–º–∞ –≤ –º—ã—Å–ª—è—Ö, —á—É–≤—Å—Ç–≤–∞—Ö, –æ—â—É—â–µ–Ω–∏—è—Ö, –ø–æ–≤–µ–¥–µ–Ω–∏–∏?</i>")
            await state.set_state(AddRequestCourse.question2)


# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –æ—Ç–ª–æ–≤–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –≤–≤–æ–¥–æ–≤ –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏—è question1
@user_private_router.message(AddRequestCourse.question1)
async def add_question1_2(message: types.Message, state: FSMContext):
    await message.answer("–¢—ã –≤–≤–µ–ª –Ω–µ –¥–æ–ø—É—Å—Ç–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ, –≤–≤–µ–¥–∏ —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞ –∑–∞–Ω–æ–≤–æ!")


# –õ–æ–≤–∏–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏–µ question2 –∏ –ø–æ—Ç–æ–º –º–µ–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–∞ question3
@user_private_router.message(AddRequestCourse.question2, F.text)
async def add_question2(message: types.Message, state: FSMContext):
    if message.text:
        if len(message.text) < 5:
            await message.answer(
                "–û—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø–æ—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –±–æ–ª–µ–µ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—ã–ºü§î\n–í–≤–µ–¥–∏ –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å –∑–∞–Ω–æ–≤–æ."
            )
        else:
            await state.update_data(question2=message.text)
            await message.answer("<b>–û—Ç–≤–µ—Ç—å –Ω–∞ —Ç—Ä–µ—Ç–∏–π –≤–æ–ø—Ä–æ—Å.</b>\n<i>–†–µ–∑—É–ª—å—Ç–∞—Ç, –∫–æ—Ç–æ—Ä–æ–≥–æ —è —Ö–æ—á—É –¥–æ—Å—Ç–∏—á—å ‚Äî ...</i>")
            await state.set_state(AddRequestCourse.question3)


# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –æ—Ç–ª–æ–≤–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –≤–≤–æ–¥–æ–≤ –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏—è question2
@user_private_router.message(AddRequestCourse.question2)
async def add_question2_2(message: types.Message, state: FSMContext):
    await message.answer("–¢—ã –≤–≤–µ–ª –Ω–µ –¥–æ–ø—É—Å—Ç–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ, –≤–≤–µ–¥–∏ —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞ –∑–∞–Ω–æ–≤–æ!")


# –õ–æ–≤–∏–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏–µ question3
@user_private_router.message(AddRequestCourse.question3, F.text)
async def add_question3(message: types.Message, state: FSMContext, session: AsyncSession, bot: Bot):
    if message.text:
        if len(message.text) < 5:
            await message.answer(
                "–û—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø–æ—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –±–æ–ª–µ–µ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—ã–ºü§î\n–í–≤–µ–¥–∏ –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å –∑–∞–Ω–æ–≤–æ."
            )
        else:
            await state.update_data(question3=message.text)
            data = await state.get_data()

            user_id = message.from_user.id
            full_name = message.from_user.full_name
            username_ = message.from_user.username
            user_link = f"<a href='tg://user?id={user_id}'>{full_name}</a>"
            user_link2 = f"<a href='tg://user?id={user_id}'>–°—Å—ã–ª–∫–∞ –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</a>"

            # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
            formatted_data = (
                f"<b>–ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –Ω–∞ –∫—É—Ä—Å:</b>\n"
                f"‚úÖ–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç:\n"
                f"username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:\n@{username_}\n"
                f"{user_link2}:\n{user_link}\n"
                f"‚úÖ1.–ü—Ä–æ–±–ª–µ–º–∞, –∫–æ—Ç–æ—Ä—É—é —è —Ö–æ—á—É —Ä–µ—à–∏—Ç—å ‚Äî \n{data.get('question1')}\n"
                f"‚úÖ2.–ö–∞–∫ –ø—Ä–æ—è–≤–ª—è–µ—Ç—Å—è —Ç–≤–æ—è –ø—Ä–æ–±–ª–µ–º–∞ –≤ –º—ã—Å–ª—è—Ö, —á—É–≤—Å—Ç–≤–∞—Ö, –æ—â—É—â–µ–Ω–∏—è—Ö, –ø–æ–≤–µ–¥–µ–Ω–∏–∏?\n{data.get('question2')}\n"
                f"‚úÖ3.–†–µ–∑—É–ª—å—Ç–∞—Ç, –∫–æ—Ç–æ—Ä–æ–≥–æ —è —Ö–æ—á—É –¥–æ—Å—Ç–∏—á—å ‚Äî ...\n{data.get('question3')}\n"
            )

            # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
            admin_id = config.tg_bot.id_chat_admin
            await bot.send_message(chat_id=admin_id, text=formatted_data)

            try:
                await orm_add_request_course_information(session=session,
                                                         data=data,
                                                         user_id=message.from_user.id,
                                                         username=message.from_user.username,
                                                         first_name=message.from_user.first_name,
                                                         last_name=message.from_user.last_name)
                await message.answer(
                    "–°–ø–∞—Å–∏–±–æ –∑–∞ —Ç–≤–æ–∏ –æ—Ç–≤–µ—Ç—ã.\n–ù–∞—à –ø—Å–∏—Ö–æ–ª–æ–≥ –¥–∞—Å—Ç —Ç–µ–±–µ –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å"
                    " –≤ —Ç–µ—á–µ–Ω–∏–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —á–∞—Å–æ–≤, –≤ —Ä–µ–¥–∫–∏—Ö —Å–ª—É—á–∞—è—Ö –≤ —Å—Ä–æ–∫ –¥–æ 24 —á–∞—Å–æ–≤.",
                    reply_markup=get_callback_btns(btns=LEXICON_btn_back_to_questions))
                await state.clear()

            except Exception as e:
                await message.answer(
                    f"–û—à–∏–±–∫–∞: \n{str(e)}\n–û–±—Ä–∞—Ç–∏—Å—å –∫ –ø—Ä–æ–≥—Ä–∞–º–º–µ—Ä—É, –æ–Ω –æ–ø—è—Ç—å –¥–µ–Ω–µ–≥ —Ö–æ—á–µ—Ç", sizes=(2,))
                await state.clear()


# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –æ—Ç–ª–æ–≤–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –≤–≤–æ–¥–æ–≤ –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏—è question3
@user_private_router.message(AddRequestCourse.question3)
async def add_question3(message: types.Message, state: FSMContext):
    await message.answer("–¢—ã –≤–≤–µ–ª –Ω–µ –¥–æ–ø—É—Å—Ç–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ, –≤–≤–µ–¥–∏ —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞ –∑–∞–Ω–æ–≤–æ!")


########################################  end FSM for question form###################################################################


#####################################FSM for code missing form ######################################################

class AddSendMail(StatesGroup):
    # –®–∞–≥–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–π
    sending_mail = State()


# c—Ç–∞–Ω–æ–≤–∏–º—Å—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ sending_mail
@user_private_router.callback_query(StateFilter(None), F.data == 'send_mail_adress')
async def question_form(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.answer("<b>–ü—Ä–∏—à–ª–∏ —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã–π –∞–¥—Ä–µ—Å, –∫–æ—Ç–æ—Ä—ã–π –±—ã–ª —É–∫–∞–∑–∞–Ω –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ.</b>")
    # await callback.message.delete()
    await state.set_state(AddSendMail.sending_mail)


# –õ–æ–≤–∏–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏–µ sending_mail
@user_private_router.message(AddSendMail.sending_mail, F.text)
async def add_sending_mail_information(message: types.Message, state: FSMContext, session: AsyncSession, bot: Bot):
    if message.text:
        if len(message.text) < 3:
            await message.answer(
                "–î—É–º–∞—é —ç—Ç–æ–≥–æ –Ω–µ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ, —á—Ç–æ–±—ã —Å–≤—è–∑–∞—Ç—å—Å—è —Å —Ç–æ–±–æ–π. –ù–∞–ø–∏—à–∏ –µ—â–µ —Ä–∞–∑!"
            )
        else:
            await state.update_data(sending_mail=message.text)
            data = await state.get_data()

            user_id = message.from_user.id
            full_name = message.from_user.full_name
            username_ = message.from_user.username
            user_link = f"<a href='tg://user?id={user_id}'>{full_name}</a>"
            user_link2 = f"<a href='tg://user?id={user_id}'>–°—Å—ã–ª–∫–∞ –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</a>"

            # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
            formatted_data = (
                f"<b>–ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å.</b>\n"
                f"–ù–µ –ø—Ä–∏—à–µ–ª –∫–æ–¥.\n"
                f"‚úÖ–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç:\n"
                f"username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:\n@{username_}\n"
                f"{user_link2}:\n{user_link}\n"
                f"‚úÖ–ê–¥—Ä–µ—Å —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –ø–æ—á—Ç—ã, –∫–æ—Ç–æ—Ä—ã–π –±—ã–ª —É–∫–∞–∑–∞–Ω –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ:\n{data.get('sending_mail')}\n"
            )

            # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
            admin_id = config.tg_bot.id_chat_admin
            await bot.send_message(chat_id=admin_id, text=formatted_data)

            try:
                await orm_add_code_missing_information(session=session,
                                                       data=data,
                                                       user_id=message.from_user.id,
                                                       username=message.from_user.username,
                                                       first_name=message.from_user.first_name,
                                                       last_name=message.from_user.last_name)
                await message.answer(text=LEXICON_RU['/answer_about_code'],
                                     reply_markup=get_callback_btns(btns=LEXICON_btn_back_to_questions))
                await state.clear()
            except Exception as e:
                await message.answer(
                    f"–û—à–∏–±–∫–∞: \n{str(e)}\n–û–±—Ä–∞—Ç–∏—Å—å –∫ –ø—Ä–æ–≥—Ä–∞–º–º–µ—Ä—É, –æ–Ω –æ–ø—è—Ç—å –¥–µ–Ω–µ–≥ —Ö–æ—á–µ—Ç", sizes=(2,))
                await state.clear()


# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –æ—Ç–ª–æ–≤–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –≤–≤–æ–¥–æ–≤ –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏—è sending_mail
@user_private_router.message(AddSendMail.sending_mail)
async def add_sending_mail_information_2(message: types.Message, state: FSMContext):
    await message.answer("–¢—ã –≤–≤–µ–ª –Ω–µ –¥–æ–ø—É—Å—Ç–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ, –≤–≤–µ–¥–∏ —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞ –∑–∞–Ω–æ–≤–æ!")


@user_private_router.callback_query(F.data == 'question_is_solved')
async def question_form_finish_answer(callback: types.CallbackQuery):
    await callback.message.answer("<b>–°–ø–∞—Å–∏–±–æ!</b>\n"
                                  "–ö–æ–º–∞–Ω–¥–∞ Mindspa —Ä–∞–¥–∞ –ø–æ–º–æ—á—å —Ç–µ–±–µ.",
                                  reply_markup=get_callback_btns(btns=LEXICON_btn_back_to_questions))
    # await callback.message.delete()


##################################################bad code###########################

@user_private_router.callback_query(F.data == 'bad_code')
async def get_answer_bad_code(callback: types.CallbackQuery):
    await callback.message.answer(text=LEXICON_RU["/bad_code"],
                                  reply_markup=get_callback_btns(btns=LEXICON_btn_code_do_not_work, sizes=(1,)))
    # await callback.message.delete()


@user_private_router.callback_query(F.data == 'problem_is_solved')
async def get_answer_problem_solved(callback: types.CallbackQuery):
    await callback.message.answer(text=LEXICON_RU["/bad_code_problem_solved"],
                                  reply_markup=get_callback_btns(btns=LEXICON_btn_back_to_questions))
    # await callback.message.delete()


@user_private_router.callback_query(F.data == 'problem_is_not_solved')
async def get_answer_problem_not_solved(callback: types.CallbackQuery, bot: Bot, session: AsyncSession):
    await orm_add_info_badcode(session=session,
                               user_id=callback.from_user.id,
                               username=callback.from_user.username,
                               first_name=callback.from_user.first_name,
                               last_name=callback.from_user.last_name)
    await callback.message.answer(text=LEXICON_RU["/bad_code_problem_not_solved"],
                                  reply_markup=get_callback_btns(btns=LEXICON_btn_back_to_questions))
    user_id = callback.from_user.id
    full_name = callback.from_user.full_name
    username_ = callback.from_user.username
    user_link = f"<a href='tg://user?id={user_id}'>{full_name}</a>"
    user_link2 = f"<a href='tg://user?id={user_id}'>–°—Å—ã–ª–∫–∞ –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</a>"

    # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
    formatted_data = (
        f"<b>–ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å.</b>\n"
        f"–ú–Ω–µ –ø—Ä–∏—à–µ–ª –∫–æ–¥, –Ω–æ –æ–Ω –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç.\n"
        f"‚úÖ–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç:\n"
        f"username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:\n@{username_}\n"
        f"{user_link2}:\n{user_link}\n"
    )

    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
    admin_id = config.tg_bot.id_chat_admin
    await bot.send_message(chat_id=admin_id, text=formatted_data)
    # await callback.message.delete()


################################################## end bad code###########################

################################################## entering code instruction ##############

@user_private_router.callback_query(F.data == 'do_not_now_how_to_enter_code')
async def get_instruction_code(callback: types.CallbackQuery, session: AsyncSession):
    await orm_add_information_whereentercode(session=session,
                                           user_id=callback.from_user.id,
                                           username=callback.from_user.username,
                                           first_name=callback.from_user.first_name,
                                           last_name=callback.from_user.last_name)
    await callback.message.answer(text=LEXICON_RU["/instruction_entering_code"],
                                  reply_markup=get_inlineMix_btns(btns=LEXICON_btn_model_phone, sizes=(2,)),
                                  disable_web_page_preview=True)
    # await callback.message.delete()


@user_private_router.callback_query(F.data == 'android_phone')
async def send_pdf_android(calback: CallbackQuery):
    try:
        # –û—Ç–ø—Ä–∞–≤–∫–∞ PDF-–¥–æ–∫—É–º–µ–Ω—Ç–∞ –ø–æ –µ–≥–æ ID
        await calback.message.answer_document(document=PDF_FILE_ANDR_INTR,
                                              caption=LEXICON_RU['/instruction_android'],
                                              reply_markup=get_callback_btns(btns=LEXICON_btn_back_and_video_android,
                                                                             sizes=(1,)))

    except Exception as e:
        await calback.message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞: {str(e)}")


@user_private_router.callback_query(F.data == 'video_android')
async def send_pdf_android(calback: CallbackQuery):
    try:
        # –û—Ç–ø—Ä–∞–≤–∫–∞ PDF-–¥–æ–∫—É–º–µ–Ω—Ç–∞ –ø–æ –µ–≥–æ ID
        await calback.message.answer_video(video=VIDEO_FILE_ANDR_INTR,
                                           caption="–í–∏–¥–µ–æ–∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è.",
                                           reply_markup=get_callback_btns(btns=LEXICON_btn_back_to_questions))

    except Exception as e:
        await calback.message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞: {str(e)}")


@user_private_router.callback_query(F.data == 'iphone_phone')
async def send_pdf_iphone(calback: CallbackQuery):
    try:
        # –û—Ç–ø—Ä–∞–≤–∫–∞ PDF-–¥–æ–∫—É–º–µ–Ω—Ç–∞ –ø–æ –µ–≥–æ ID
        await calback.message.answer_document(document=PDF_FILE_IPHONE_INTR,
                                              caption=LEXICON_RU['/instruction_iphone'],
                                              reply_markup=get_callback_btns(btns=LEXICON_btn_back_and_video_iphone,
                                                                             sizes=(1,)))

    except Exception as e:
        await calback.message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞: {str(e)}")


@user_private_router.callback_query(F.data == 'video_iphone')
async def send_video_iphone(calback: CallbackQuery):
    try:
        # –û—Ç–ø—Ä–∞–≤–∫–∞ PDF-–¥–æ–∫—É–º–µ–Ω—Ç–∞ –ø–æ –µ–≥–æ ID
        await calback.message.answer_video(video=VIDEO_FILE_IPHONE_INTR,
                                           caption='–í–∏–¥–µ–æ–∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è.',
                                           reply_markup=get_callback_btns(btns=LEXICON_btn_back_to_questions))

    except Exception as e:
        await calback.message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞: {str(e)}")


################################################## end  entering code instruction ##############################


################################################## I can't log into my account###########################

@user_private_router.callback_query(F.data == 'can_not_enter_account')
async def get_information_entering(callback: types.CallbackQuery):
    await callback.message.answer(text=LEXICON_RU["/instruction_entering_accaunt"],
                                  reply_markup=get_callback_btns(btns=LEXICON_btn_logging_instruction, sizes=(1,)))
    # await callback.message.delete()


class AddLogAccaunt(StatesGroup):
    # –®–∞–≥–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–π
    log_sending_mail = State()


# c—Ç–∞–Ω–æ–≤–∏–º—Å—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ sending_mail
@user_private_router.callback_query(StateFilter(None), F.data == 'log_send_mail_to_admin')
async def log_form(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.answer("<b>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏—à–ª–∏ —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã–π –∞–¥—Ä–µ—Å, –∫–æ—Ç–æ—Ä—ã–π –±—ã–ª —É–∫–∞–∑–∞–Ω –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.</b>")
    # await callback.message.delete()
    await state.set_state(AddLogAccaunt.log_sending_mail)


# –õ–æ–≤–∏–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏–µ sending_mail
@user_private_router.message(AddLogAccaunt.log_sending_mail, F.text)
async def add_sending_mail_information_log(message: types.Message, state: FSMContext, session: AsyncSession, bot: Bot):
    if message.text:
        if len(message.text) < 3:
            await message.answer(
                "–î—É–º–∞—é —ç—Ç–æ–≥–æ –Ω–µ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ, —á—Ç–æ–±—ã —Å–≤—è–∑–∞—Ç—å—Å—è —Å —Ç–æ–±–æ–π. –ù–∞–ø–∏—à–∏ –µ—â–µ —Ä–∞–∑!"
            )
        else:
            await state.update_data(log_sending_mail=message.text)
            data = await state.get_data()

            user_id = message.from_user.id
            full_name = message.from_user.full_name
            username_ = message.from_user.username
            user_link = f"<a href='tg://user?id={user_id}'>{full_name}</a>"
            user_link2 = f"<a href='tg://user?id={user_id}'>–°—Å—ã–ª–∫–∞ –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</a>"

            # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
            formatted_data = (
                f"<b>–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.</b>\n"
                f"–ù–µ –º–æ–≥—É –≤–æ–π—Ç–∏ –≤ –∞–∫–∫–∞—É–Ω—Ç.\n"
                f"‚úÖ–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç:\n"
                f"username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:\n@{username_}\n"
                f"{user_link2}:\n{user_link}\n"
                f"‚úÖ–ê–¥—Ä–µ—Å —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –ø–æ—á—Ç—ã, –∫–æ—Ç–æ—Ä—ã–π –±—ã–ª —É–∫–∞–∑–∞–Ω –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:\n{data.get('log_sending_mail')}\n"
            )

            # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
            admin_id = config.tg_bot.id_chat_admin
            await bot.send_message(chat_id=admin_id, text=formatted_data)

            try:
                await orm_add_information_cannotlogin(session=session,
                                                       data=data,
                                                       user_id=message.from_user.id,
                                                       username=message.from_user.username,
                                                       first_name=message.from_user.first_name,
                                                       last_name=message.from_user.last_name)
                await message.answer(text=LEXICON_RU['/log_code_answer'],
                                     reply_markup=get_callback_btns(btns=LEXICON_btn_back_to_questions))

                await state.clear()
            except Exception as e:
                await message.answer(
                    f"–û—à–∏–±–∫–∞: \n{str(e)}\n–û–±—Ä–∞—Ç–∏—Å—å –∫ –ø—Ä–æ–≥—Ä–∞–º–º–µ—Ä—É, –æ–Ω –æ–ø—è—Ç—å –¥–µ–Ω–µ–≥ —Ö–æ—á–µ—Ç", sizes=(2,))
                await state.clear()


# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –æ—Ç–ª–æ–≤–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –≤–≤–æ–¥–æ–≤ –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏—è log_sending_mail
@user_private_router.message(AddLogAccaunt.log_sending_mail)
async def add_sending_mail_information_log_2(message: types.Message, state: FSMContext):
    await message.answer("–¢—ã –≤–≤–µ–ª –Ω–µ –¥–æ–ø—É—Å—Ç–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ, –≤–≤–µ–¥–∏ —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞ –∑–∞–Ω–æ–≤–æ!")


@user_private_router.callback_query(F.data == 'log_problem_is_solved')
async def question_form_finish_answer(callback: types.CallbackQuery):
    await callback.message.answer("<b>–°–ø–∞—Å–∏–±–æ!</b>\n"
                                  "–ö–æ–º–∞–Ω–¥–∞ Mindspa —Ä–∞–¥–∞ –ø–æ–º–æ—á—å —Ç–µ–±–µ.",
                                  reply_markup=get_callback_btns(btns=LEXICON_btn_back_to_questions))
    # await callback.message.delete()


################################################## end I can't log into my account###########################

################################################## My question is not in list ###########################

@user_private_router.callback_query(F.data == 'no_my_question')
async def get_no_my_question(callback: types.CallbackQuery):
    await callback.message.answer(text=LEXICON_RU["/no_my_question"],
                                  reply_markup=get_callback_btns(btns=LEXICON_btn_no_my_question, sizes=(1,)))
    # await callback.message.delete()


class AddNewQuestion(StatesGroup):
    # –®–∞–≥–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–π
    new_question = State()


# c—Ç–∞–Ω–æ–≤–∏–º—Å—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ new_question
@user_private_router.callback_query(StateFilter(None), F.data == 'write_new_question')
async def get_form_new_question(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.answer("<b>–ù–∞–ø–∏—à–∏ –∫–∞–∫–æ–π —É —Ç–µ–±—è –≤–æ–ø—Ä–æ—Å.</b>")
    # await callback.message.delete()
    await state.set_state(AddNewQuestion.new_question)


# –õ–æ–≤–∏–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏–µ new_question
@user_private_router.message(AddNewQuestion.new_question, F.text)
async def add_new_question_information(message: types.Message, state: FSMContext, session: AsyncSession, bot: Bot):
    if message.text:
        if len(message.text) < 4:
            await message.answer(
                "–ù–∞–ø–∏—à–∏ –±–æ–ª—å—à–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏!"
            )
        else:
            await state.update_data(new_question=message.text)
            data = await state.get_data()

            user_id = message.from_user.id
            full_name = message.from_user.full_name
            username_ = message.from_user.username
            user_link = f"<a href='tg://user?id={user_id}'>{full_name}</a>"
            user_link2 = f"<a href='tg://user?id={user_id}'>–°—Å—ã–ª–∫–∞ –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</a>"

            # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
            formatted_data = (
                f"<b>–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.</b>\n"
                f"–í —Å–ø–∏—Å–∫–µ –Ω–µ—Ç –º–æ–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞.\n"
                f"‚úÖ–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç:\n"
                f"username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:\n@{username_}\n"
                f"{user_link2}:\n{user_link}\n"
                f"‚úÖ–¢–µ–∫—Å —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:\n{data.get('new_question')}\n"
            )

            # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
            admin_id = config.tg_bot.id_chat_admin
            await bot.send_message(chat_id=admin_id, text=formatted_data)
            try:
                await orm_add_info_noquestion(session=session,
                                                       data=data,
                                                       user_id=message.from_user.id,
                                                       username=message.from_user.username,
                                                       first_name=message.from_user.first_name,
                                                       last_name=message.from_user.last_name)
                await message.answer(text=LEXICON_RU['/finish_answer'],
                                     reply_markup=get_callback_btns(btns=LEXICON_btn_back_to_questions))
                await state.clear()
            except Exception as e:
                await message.answer(
                    f"–û—à–∏–±–∫–∞: \n{str(e)}\n–û–±—Ä–∞—Ç–∏—Å—å –∫ –ø—Ä–æ–≥—Ä–∞–º–º–µ—Ä—É, –æ–Ω –æ–ø—è—Ç—å –¥–µ–Ω–µ–≥ —Ö–æ—á–µ—Ç", sizes=(2,))
                await state.clear()


# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –æ—Ç–ª–æ–≤–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –≤–≤–æ–¥–æ–≤ –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏—è new_question
@user_private_router.message(AddNewQuestion.new_question)
async def add_new_question_information_2(message: types.Message, state: FSMContext):
    await message.answer("–¢—ã –≤–≤–µ–ª –Ω–µ –¥–æ–ø—É—Å—Ç–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ, –≤–≤–µ–¥–∏ —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞ –∑–∞–Ω–æ–≤–æ!")


############################################################################
# @user_private_router.message()
# async def send_echo(message: Message):
#     try:
#         if message.photo:
#             await message.send_copy(chat_id=message.chat.id)
#             photo_id = message.photo[0].file_id
#             await message.answer(f"ID —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏: {photo_id}")
#         elif message.video:
#             await message.send_copy(chat_id=message.chat.id)
#             video_id = message.video.file_id
#             await message.answer(f"ID –≤–∏–¥–µ–æ: {video_id}")
#         elif message.document:
#             await message.send_copy(chat_id=message.chat.id)
#             document_id = message.document.file_id
#             await message.answer(f"ID –¥–æ–∫—É–º–µ–Ω—Ç–∞: {document_id}")
#     except TypeError:
#         await message.reply(text=LEXICON_RU['no_echo'])
