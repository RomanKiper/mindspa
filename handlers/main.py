from aiogram import types, Router, F, Bot
from aiogram.filters import CommandStart, Command
from aiogram.types import CallbackQuery, InlineKeyboardButton, Message
from sqlalchemy import select
from sqlalchemy.ext.asyncio import AsyncSession

from filters.chat_types import ChatTypeFilter
from keyboards.inline.inline import get_callback_btns
from lexicon.lexicon import LEXICON_btn_questions, LEXICON_RU, LEXICON_btn_answer_questions

from aiogram.filters import Command, StateFilter, or_f
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext

user_private_router = Router()
user_private_router.message.filter(ChatTypeFilter(['private']))


# user_private_router.callback_query.filter(ChatTypeFilter(['private']))


@user_private_router.message(F.text.lower().in_({'–≤–æ–ø—Ä–æ—Å—ã', '–≤–æ–ø—Ä–æ—Å', "questions"}))
@user_private_router.message(CommandStart())
@user_private_router.message(Command('questions'))
@user_private_router.callback_query(F.data == 'main_list_questions')
async def start_cmd(message_or_callback: types.Union[types.Message, CallbackQuery], session: AsyncSession):
    if isinstance(message_or_callback, types.Message):
        message = message_or_callback
        await message.answer(text=LEXICON_RU["/question_list"],
                             reply_markup=get_callback_btns(btns=LEXICON_btn_questions, sizes=(1,)))
        await message.delete()

    elif isinstance(message_or_callback, types.CallbackQuery):
        callback = message_or_callback
        await callback.message.answer(text=LEXICON_RU["/question_list"],
                                      reply_markup=get_callback_btns(btns=LEXICON_btn_questions, sizes=(1,)))
        await callback.message.delete()


@user_private_router.callback_query(F.data == 'help_with_course')
async def get_help_with_questions(callback: types.CallbackQuery):
    await callback.message.answer(text=LEXICON_RU["/help_with_course"],
                                  reply_markup=get_callback_btns(btns=LEXICON_btn_answer_questions, sizes=(1,)))
    await callback.message.delete()


###########################################

class AddRequestCourse(StatesGroup):
    # –®–∞–≥–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–π
    question1 = State()
    question2 = State()
    question3 = State()
    contact_information = State()

    # product_for_change = None

    texts = {
        'AddRequestCourse:question1': '–û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ –≤–æ–ø—Ä–æ—Å ‚Ññ1 - "–ü—Ä–æ–±–ª–µ–º–∞, –∫–æ—Ç–æ—Ä—É—é —è —Ö–æ—á—É —Ä–µ—à–∏—Ç—å - ...", –∑–∞–Ω–æ–≤–æ.',
        'AddRequestCourse:question2': '–û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ –≤–æ–ø—Ä–æ—Å ‚Ññ2 - "–ú–æ—è –ø—Ä–æ–±–ª–µ–º–∞ –≤—ã—Ä–∞–∂–∞–µ—Ç—Å—è –≤....", –∑–∞–Ω–æ–≤–æ.',
        'AddRequestCourse:question3': '–û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ –≤–æ–ø—Ä–æ—Å ‚Ññ3 - "–†–µ–∑—É–ª—å—Ç–∞—Ç, –∫–æ—Ç–æ—Ä–æ–≥–æ —è —Ö–æ—á—É –¥–æ—Å—Ç–∏—á—å ‚Äî ...", –∑–∞–Ω–æ–≤–æ.',
        'AddRequestCourse:contact_information': '–≠—Ç–æ—Ç —Å—Ç–µ–π—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–π, –ø–æ—ç—Ç–æ–º—É...',
    }


# –í–µ—Ä–Ω—É—Ç—Å—è –Ω–∞ —à–∞–≥ –Ω–∞–∑–∞–¥ (–Ω–∞ –ø—Ä–æ—à–ª–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ)
@user_private_router.message(StateFilter("*"), Command("–Ω–∞–∑–∞–¥"))
@user_private_router.message(StateFilter("*"), F.text.casefold() == "–Ω–∞–∑–∞–¥")
async def back_step_handler(message: types.Message, state: FSMContext) -> None:
    current_state = await state.get_state()

    if current_state == AddRequestCourse.question1:
        await message.answer(
            '–ü—Ä–µ–¥–∏–¥—É—â–µ–≥–æ —à–∞–≥–∞ –Ω–µ—Ç. –ù–∞–ø–∏—à–∏—Ç–µ –û–¢–ú–ï–ù–ê –∏–ª–∏ –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ –≤–æ–ø—Ä–æ—Å ‚Ññ1 - "–ü—Ä–æ–±–ª–µ–º–∞, –∫–æ—Ç–æ—Ä—É—é —è —Ö–æ—á—É —Ä–µ—à–∏—Ç—å - ..."'
        )
        return

    previous = None
    for step in AddRequestCourse.__all_states__:
        if step.state == current_state:
            await state.set_state(previous)
            await message.answer(
                f"–û–∫, –≤—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –∫ –ø—Ä–æ—à–ª–æ–º—É —à–∞–≥—É \n {AddRequestCourse.texts[previous.state]}"
            )
            return
        previous = step


#
# @admin_router.callback_query(F.data == 'products_list')
# async def admin_features(callback: types.CallbackQuery, session: AsyncSession):
#     categories = await orm_get_categories(session)
#     btns = {category.name: f'category_{category.id}' for category in categories}
#     await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é", reply_markup=get_callback_btns(btns=btns))
#
#
# @admin_router.callback_query(F.data.startswith('category_'))
# async def starring_at_product(callback: types.CallbackQuery, session: AsyncSession):
#     category_id = callback.data.split('_')[-1]
#     user_id = callback.from_user.id
#     print(user_id)
#     for product in await orm_get_products(session, int(category_id), int(user_id)):
#         await callback.message.answer_photo(
#             product.image,
#             caption=f"<strong>{product.name}\
#                     </strong>\n{product.description}\n–°—Ç–æ–∏–º–æ—Å—Ç—å: {round(product.price, 2)}",
#             reply_markup=get_callback_btns(
#                 btns={
#                     "–£–¥–∞–ª–∏—Ç—å": f"delete_{product.id}",
#                     "–ò–∑–º–µ–Ω–∏—Ç—å": f"change_{product.id}",
#                 },
#                 sizes=(2,)
#             ),
#         )
#     await callback.answer()
#     await callback.message.answer("–û–ö, –≤–æ—Ç —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ ‚è´")
#
#
# @admin_router.callback_query(F.data.startswith("delete_"))
# async def delete_product_callback(callback: types.CallbackQuery, session: AsyncSession):
#     product_id = callback.data.split("_")[-1]
#     await orm_delete_product(session, int(product_id))
#
#     await callback.answer("–¢–æ–≤–∞—Ä —É–¥–∞–ª–µ–Ω")
#     await callback.message.answer("–¢–æ–≤–∞—Ä —É–¥–∞–ª–µ–Ω!")
#
# # FSM:
#
# @admin_router.callback_query(StateFilter(None), F.data.startswith("change_"))
# async def change_product_callback(callback: types.CallbackQuery, state: FSMContext, session: AsyncSession):
#     product_id = callback.data.split("_")[-1]
#     product_for_change = await orm_get_product(session, int(product_id))
#     AddProduct.product_for_change = product_for_change
#     await callback.answer()
#     await callback.message.answer(
#         "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞", reply_markup=types.ReplyKeyboardRemove()
#     )
#     await state.set_state(AddProduct.name)
#
#
# –°—Ç–∞–Ω–æ–≤–∏–º—Å—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å ‚Ññ1
@user_private_router.callback_query(StateFilter(None), F.data == 'first_question_form')
async def question_form(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.answer("–û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ –ø–µ—Ä–≤—ã–π–π –≤–æ–ø—Ä–æ—Å. –ü—Ä–æ–±–ª–µ–º–∞, –∫–æ—Ç–æ—Ä—É—é —è —Ö–æ—á—É —Ä–µ—à–∏—Ç—å - ...")
    await callback.message.delete()
    await state.set_state(AddRequestCourse.question1)


# –•–µ–Ω–¥–ª–µ—Ä –æ—Ç–º–µ–Ω—ã –∏ —Å–±—Ä–æ—Å–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤—Å–µ–≥–¥–∞ –∏–º–µ–Ω–Ω–æ —Ö–¥–µ—Å—å,
# –ø–æ—Å–ª–µ —Ç–æ–≥–æ –∫–∞–∫ —Ç–æ–ª—å–∫–æ –≤—Å—Ç–∞–ª–∏ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–æ–º–µ—Ä 1 (—ç–ª–µ–º–µ–Ω—Ç–∞—Ä–Ω–∞—è –æ—á–µ—Ä–µ–¥–Ω–æ—Å—Ç—å —Ñ–∏–ª—å—Ç—Ä–æ–≤)
@user_private_router.message(StateFilter("*"), Command("–æ—Ç–º–µ–Ω–∞"))
@user_private_router.message(StateFilter("*"), F.text.casefold() == "–æ—Ç–º–µ–Ω–∞")
async def cancel_handler(message: types.Message, state: FSMContext) -> None:
    current_state = await state.get_state()
    if current_state is None:
        return
    await state.clear()
    await message.answer("–î–µ–π—Å—Ç–≤–∏—è –æ—Ç–º–µ–Ω–µ–Ω—ã",
                         reply_markup=get_callback_btns(btns=LEXICON_btn_answer_questions, sizes=(1,)))


# –õ–æ–≤–∏–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏–µ question1 –∏ –ø–æ—Ç–æ–º –º–µ–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–∞ question2
@user_private_router.message(AddRequestCourse.question1, F.text)
async def add_question1(message: types.Message, state: FSMContext):
    if message.text:
        if len(message.text) < 5:
            await message.answer(
                "–û—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø–æ—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –±–æ–ª–µ–µ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—ã–ºü§î \n –í–≤–µ–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å –∑–∞–Ω–æ–≤–æ."
            )
        else:
            await state.update_data(question1=message.text)
            await message.answer("–û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ –≤—Ç–æ—Ä–æ–π –≤–æ–ø—Ä–æ—Å.\n–ú–æ—è –ø—Ä–æ–±–ª–µ–º–∞ –≤—ã—Ä–∞–∂–∞–µ—Ç—Å—è –≤....")
            await state.set_state(AddRequestCourse.question2)


# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –æ—Ç–ª–æ–≤–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –≤–≤–æ–¥–æ–≤ –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏—è question1
@user_private_router.message(AddRequestCourse.question1)
async def add_question1_2(message: types.Message, state: FSMContext):
    await message.answer("–í—ã –≤–≤–µ–ª–∏ –Ω–µ –¥–æ–ø—É—Å—Ç–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞ –∑–∞–Ω–æ–≤–æ!")


# –õ–æ–≤–∏–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏–µ question2 –∏ –ø–æ—Ç–æ–º –º–µ–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–∞ question3
@user_private_router.message(AddRequestCourse.question2, F.text)
async def add_question2(message: types.Message, state: FSMContext):
    if message.text:
        if len(message.text) < 5:
            await message.answer(
                "–û—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø–æ—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –±–æ–ª–µ–µ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—ã–ºü§î \n –í–≤–µ–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å –∑–∞–Ω–æ–≤–æ."
            )
        else:
            await state.update_data(question2=message.text)
            await message.answer("–û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Ç—Ä–µ—Ç–∏–π –≤–æ–ø—Ä–æ—Å.\n–†–µ–∑—É–ª—å—Ç–∞—Ç, –∫–æ—Ç–æ—Ä–æ–≥–æ —è —Ö–æ—á—É –¥–æ—Å—Ç–∏—á—å ‚Äî ...")
            await state.set_state(AddRequestCourse.question2)


# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –æ—Ç–ª–æ–≤–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –≤–≤–æ–¥–æ–≤ –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏—è question1
@user_private_router.message(AddRequestCourse.question2)
async def add_question2_2(message: types.Message, state: FSMContext):
    await message.answer("–í—ã –≤–≤–µ–ª–∏ –Ω–µ –¥–æ–ø—É—Å—Ç–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞ –∑–∞–Ω–æ–≤–æ!")

#
#
# # –õ–æ–≤–∏–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏–µ image –∏ –ø–æ—Ç–æ–º –≤—ã—Ö–æ–¥–∏–º –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏–π
# @admin_router.message(AddProduct.image, or_f(F.photo, F.text == "."))
# async def add_image(message: types.Message, state: FSMContext, session: AsyncSession):
#     if message.text and message.text == "." and AddProduct.product_for_change:
#         await state.update_data(image=AddProduct.product_for_change.image)
#
#     elif message.photo:
#         await state.update_data(image=message.photo[-1].file_id)
#     else:
#         await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è!")
#         return
#     data = await state.get_data()
#     user_id = message.from_user.id
#     try:
#         if AddProduct.product_for_change:
#             await orm_update_product(session, AddProduct.product_for_change.id, data, user_id)
#         else:
#             await orm_add_product(session, data, user_id)
#         await message.answer("–¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω/–∏–∑–º–µ–Ω–µ–Ω", reply_markup=get_callback_btns(btns=LEXICON_btn_main_admin_menu, sizes=(2,)))
#         await state.clear()
#
#     except Exception as e:
#         await message.answer(
#             f"–û—à–∏–±–∫–∞: \n{str(e)}\n–û–±—Ä–∞—Ç–∏—Å—å –∫ –ø—Ä–æ–≥—Ä–∞–º–º–µ—Ä—É, –æ–Ω –æ–ø—è—Ç—å –¥–µ–Ω–µ–≥ —Ö–æ—á–µ—Ç",
#             reply_markup=get_callback_btns(btns=LEXICON_btn_main_admin_menu, sizes=(2,)),
#         )
#         await state.clear()
#
#     AddProduct.product_for_change = None
#
# # –õ–æ–≤–∏–º –≤—Å–µ –ø—Ä–æ—á–µ–µ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ –¥–ª—è —ç—Ç–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
# @admin_router.message(AddProduct.image)
# async def add_image2(message: types.Message, state: FSMContext):
#     await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ.")
